{
  "name": "promise-now",
  "version": "1.1.0",
  "description": "Barebone Promise/A+ implementation",
  "main": "lib/Promise.js",
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "devDependencies": {
    "promises-aplus-tests": "*",
    "mocha": "1.x",
    "mocha-as-promised": "1.x"
  },
  "scripts": {
    "test": "promises-aplus-tests test/promise.js --bail --reporter dot && mocha test/promiseSync.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/curvedmark/promise-now.git"
  },
  "keywords": [
    "promise",
    "promises",
    "promises-a",
    "promises-aplus",
    "async",
    "deferred",
    "future",
    "flow control"
  ],
  "author": {
    "name": "Glen Huang",
    "email": "curvedmark@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/curvedmark/promise-now/issues"
  },
  "readme": "# promise-now\n\nBarebone [Promise/A+](http://promisesaplus.com/) implementation.\n\n## Features\n\n- Extremely small (~ 1kb minified), [extremely fast](http://jsperf.com/wqfwewefewrw/18)\n\n- `.then()` being asynchronous is optional.\n\n- Passing the [Promises/A+ Compliance Test Suite](https://github.com/promises-aplus/promises-tests)\n\n## Installation\n\n\tnpm install promise-now\n\n## Example\n\n```javascript\nvar Promise = require('promise-now');\nvar promise = new Promise();\n\npromise.then(addOne).then(addOne).then(function(num) {\n\tconsole.log(num); // 3\n});\npromise.fulfill(1);\n\nfunction addOne(num) {\n\treturn num + 1;\n}\n```\n\n## API\n\n\n### promise.then([fulfillCallack], [rejectCallback]);\n\nCall `fulfillCallack(value)` if `promise` is fulfilled with `value`.\n\nOr call `rejectCallback(reason)` if `promise` is rejected with `reason`.\n\nReturn a new promise.\n\n### promise.fulfill(value, [context]);\n\nFulfill `promise` with `value`. `this` keyword equals to `context` in callbacks if provided.\n\nReturn original `promise`.\n\n### promise.reject(reason, [context]);\n\nReject `promise` with `reason`. `this` keyword equals to `context` in callbacks if provided.\n\nReturn original `promise`.\n\n### promise.done([fulfillCallack], [rejectCallback]);\n\nLike `.then()`, but throw with reason (asynchronously) if promise is rejected. Should be called at the end of `.then()` chain.\n\nReturn `undefined`.\n\n## .then() being asynchronous\n\nIf you can be sure that you will never write code like:\n\n```javascript\nvar promise = new Promise().fulfill();\n\npromise.then(function() {\n\tconsole.log(2);\n});\nconsole.log(1);\n```\n\nIn other words, you will not put synchronous code after asynchronous function calls, then it doesn't make a difference if `.then()` is asynchronous or not.\n\nBy default, promise-now use synchronous `.then()`. If you need the asynchronous version, simply patch promise-now (see `test/promise.js` on how it's done).",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/curvedmark/promise-now",
  "_id": "promise-now@1.1.0",
  "_from": "promise-now@1.x"
}
