{
  "name": "tree-transformer-async",
  "version": "1.0.0",
  "description": "Transform nodes in the tree asynchronously and sequentially",
  "main": "lib/TransformerAsync.js",
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "scripts": {
    "test": "mocha --bail"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/curvedmark/tree-transformer-async.git"
  },
  "keywords": [
    "ast",
    "tree",
    "transformer",
    "async",
    "compiler"
  ],
  "author": {
    "name": "Glen Huang",
    "email": "curvedmark@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/curvedmark/tree-transformer-async/issues"
  },
  "dependencies": {
    "tree-transformer": "*",
    "tree-visitor-async": "*"
  },
  "devDependencies": {
    "mocha": "1.x",
    "mocha-as-promised": "1.x"
  },
  "readme": "# Tree Transformer Async\n\nTransform nodes in the tree asynchronously and sequentially.\n\nAsynchronous version of [Tree Transformer](https://github.com/curvedmark/tree-transformer). Actions can return a promise and `.visit()` returns a promise.\n\n## Example\n\n```javascript\nvar fs = require('fs');\nvar Q = require('q');\nvar TransformerAsync = require('tree-transformer-async');\nvar nodes = [\n\t{ type: 'import', value: 'path/to/file1' },\n\t{ type: 'import', value: 'path/to/file2' },\n];\n\nfunction MyVisitorAsync() {}\nMyVisitorAsync.prototype = new VisitorAsync();\n\nMyVisitorAsync.prototype.visit_import = function (importNode) {\n\tvar deferred = Q.defer();\n\tfs.readFile(importNode.value, 'utf8', deferred.makeNodeResolver());\n\treturn deferred.promise.then(function (content) {\n\t\treturn content;\n\t});\n};\n\nnew MyVisitorAsync().visit(nodes).then(function (result) {\n\tconsole.log(result); // [content of file1, content of file2]\n});\n```",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/curvedmark/tree-transformer-async",
  "_id": "tree-transformer-async@1.0.0",
  "_from": "tree-transformer-async@1.x"
}
